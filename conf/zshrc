# Path to your oh-my-zsh installation.
export ZSH=$HOME/.oh-my-zsh

ZSH_THEME="amuse"

DISABLE_AUTO_TITLE="true"

plugins=(git vi-mode)

source $ZSH/oh-my-zsh.sh

export TERMINAL=alacritty
set -o vi

alias ll="ls -l --color=auto"
alias today='gcalcli 7am 6pm'
alias k=kubectl
alias vim=nvim
alias rhldap="python /home/klape/src/ldap/rh_ldap.py"
alias f="find . -name "

export EDITOR=nvim SHELL=/bin/zsh
setopt noautomenu
export PATH=$HOME/bin:$HOME/conf/bin:$HOME/.local/bin:$HOME/js/node_modules/.bin:$PATH
export PATH=$PATH:${KREW_ROOT:-$HOME/.krew}/bin
export NVIM_TUI_ENABLE_TRUE_COLOR=1
export RIPGREP_CONFIG_PATH="$HOME/.config/ripgrep/config"

export GOROOT=/go
export GOPATH=~/go
export PATH=$GOROOT/bin:$GOPATH/bin:$PATH

export GPG_TTY=$(tty)

source /usr/share/fzf/shell/key-bindings.zsh

local auth_sock=$(ls -d /tmp/ssh-X*/* 2>/dev/null)

if [[ -n "$auth_sock" ]];then
    export SSH_AUTH_SOCK="$auth_sock"
fi

if [[ -z "$SSH_AUTH_SOCK" ]]; then
    eval $(ssh-agent -s)
fi

eval $(~/secrets/secrets-setup.sh)


# Check if the s3 config is still has the stock placeholder settings
if [[ -n "$(mc alias ls s3 | grep YOUR-ACCESS-KEY-HERE)" ]]; then
    echo Setting up mc alias for s3...
    mc alias set s3 https://s3.us-east-1.amazonaws.com "$AWS_ACCESS_KEY_ID" "$AWS_SECRET_ACCESS_KEY"
fi

if [[ ! -f "$HOME/.zsh_history" ]]; then
    mc get s3/klape-devcontainer/zsh_history ~/.zsh_history
fi

setopt SHARE_HISTORY          # Share history between sessions
setopt APPEND_HISTORY         # Append rather than overwrite
setopt INC_APPEND_HISTORY     # Write immediately, don't wait for exit
setopt HIST_IGNORE_DUPS       # Don't record duplicates
setopt HIST_IGNORE_ALL_DUPS   # Remove older duplicate entries
setopt HIST_SAVE_NO_DUPS      # Don't save duplicates to file
setopt PROMPT_SUBST

export HISTSIZE=10000         # Lines in memory
export SAVEHIST=10000         # Lines saved to file

mkdir -p ~/src
cd

if [[ ! -d "$HOME/src/zettelkasten" ]]; then
    gh repo clone kylape/zettelkasten src/zettelkasten
fi

function cloneghrepos() {
    for r in "stackrox/stackrox" "kylape/neovim-config" "kylape/stackrox-tekton" "kylape/devcontainer" "kylape/pac-demo"; do
        gh repo clone $r
    done
}

git_dirty() {
    for repo in $(find ~/src -maxdepth 1 -type d); do
        if [[ "$repo" != "/root/src" && "$repo" != "/root/src/lost+found" && -n "$(git -C "$repo" status --porcelain)" ]]; then
            echo -en "\nðŸ’¾ $repo"
        fi
    done
}

PROMPT='âœ¨ devcontainer âœ¨ $(git_dirty)'" $PROMPT"

if [[ -d "/var/run/secrets/kubernetes.io/serviceaccount/" ]]; then
    kubectl config set-cluster kubernetes --server=https://kubernetes.default.svc --certificate-authority=/var/run/secrets/kubernetes.io/serviceaccount/ca.crt
    kubectl config set-credentials kubernetes --token=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
    kubectl config set-context kubernetes --cluster=kubernetes --user=kubernetes
    kubectl config use-context kubernetes
fi
